{"version":3,"sources":["components/WordGroup.js","service/idb.js","utils/parser.js","service/word.js","service/base.js","components/Search.js","components/ui/Spinner.js","components/ui/FileTypeSelect.js","utils/react-confirm-decorator/createConfirm.js","utils/react-confirm-decorator/setConfirm.js","components/ui/AlertDialog.js","utils/alert.js","components/ui/ConfirmDialog.js","utils/confirm.js","components/Options.js","components/App.js","serviceWorker.js","index.js"],"names":["WordGroup","_ref","words","limit","react_default","a","createElement","reactstrap_es","slice","map","word","key","entry","meaning","Worker","require","idbCon","JsStore","parser","parse","type","data","result","split","forEach","row","idx","d","push","Error","WordService","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tableName","addDefaultWords","asyncToGenerator","regenerator_default","mark","_callee","_ref2","parsedWords","wrap","_context","prev","next","axios","get","sent","abrupt","addWords","stop","addWordsFromFile","_ref3","_callee2","payload","blob","fileType","content","_context2","getFileContent","_x","apply","arguments","encoding","length","undefined","Promise","resolve","reader","FileReader","readAsText","onload","connection","select","from","insert","into","values","return","query","where","like","concat","clear","BaseService","dbName","initJsStore","isDbExist","then","exist","openDb","createDb","getDbSchema","catch","err","console","error","wordsTable","name","columns","Column","options","COL_OPTION","PrimaryKey","AutoIncrement","NotNull","setDataType","DATA_TYPE","String","tables","wordService","serchDebounce","AwesomeDebouncePromise","text","getWordByEntry","Search","state","handleChange","e","value","target","setState","t0","isLoading","props","id","placeholder","onChange","disabled","Component","Spinner","className","menuItems","label","FileTypeSelectField","for","menuItem","find","o","m","createConfirm","wrapper","body","document","appendChild","cleanup","ReactDOM","unmountComponentAtNode","setTimeout","remove","reject","render","react","assign","setConfirm","WrappedComponent","_Component","_class2","abort","_this$props","show","confirm","_this$props2","inherits","createClass","Alert","title","isOpen","color","onClick","alert","dialog","AlertDialog","ConfirmDialog","Options","handleDelete","message","handleLoad","_this$state","files","defineProperty","_this2","App","activeTab","wordCount","rowsInserted","_rowsInserted","toggle","tab","getWords","tabs","classnames","active","tabId","sm","md","size","offset","Search_Search","Options_Options","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","App_App","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a4f61221.chunk.js","sourcesContent":["// @flow\nimport React from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\nimport { type Word } from \"../service/word\";\n\ntype Props = {|\n  words: Word[],\n  limit: number\n|};\n\nexport default function WordGroup({ words, limit }: Props) {\n  if (!words) return <div />;\n  return (\n    <ListGroup>\n      {words.slice(0, limit).map(word => (\n        <ListGroupItem key={word.entry + word.meaning}>\n          {word.entry}: {word.meaning}\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n}\n","import * as JsStore from \"jsstore\";\n// eslint-disable-next-line\nconst Worker = require(\"worker-loader?name=scripts/jsstore.worker.js!../../node_modules/jsstore/dist/jsstore.worker\");\n\n// This will ensure that we are using only one instance.\n// Otherwise due to multiple instance multiple worker will be created.\n\nconst idbCon = new JsStore.Instance(new Worker());\nexport default idbCon;\n","// @flow\nexport type FileType = \"tsv\" | \"csv\";\n\nconst parse = (type: FileType, data: string) => {\n  switch (type) {\n    case \"tsv\":\n      const result = [];\n      data.split(\"\\n\").forEach((row, idx) => {\n        const d = row.split(\"\\t\");\n        result.push({ entry: d[0], meaning: d[1] });\n      });\n      return result;\n\n    default:\n      throw new Error(\"Parse Type Invalid\");\n  }\n};\n\nexport default { parse };\n","// @flow\nimport axios from \"axios\";\nimport BaseService from \"./base\";\nimport parser, { type FileType } from \"../utils/parser\";\n\nexport type Word = { entry: string, meaning: string };\n\nexport default class WordService extends BaseService {\n  tableName = \"\";\n\n  constructor() {\n    super();\n    this.tableName = \"words\";\n  }\n\n  getWords() {\n    return this.connection.select({ from: this.tableName });\n  }\n\n  addWord(word: Word) {\n    return this.connection.insert({\n      into: this.tableName,\n      values: [word],\n      return: true\n    });\n  }\n\n  addWords(words: Word[]) {\n    return this.connection.insert({\n      into: this.tableName,\n      values: words,\n      return: true\n    });\n  }\n\n  getWordByEntry(query: string) {\n    return this.connection.select({\n      from: this.tableName,\n      where: {\n        entry: {\n          like: `%${query}%`\n        }\n      }\n    });\n  }\n\n  clear() {\n    return this.connection.clear(this.tableName);\n  }\n\n  addDefaultWords = async () => {\n    const { data } = await axios.get(\"/ejdic-hand-utf8.txt\");\n    const parsedWords = parser.parse(\"tsv\", data);\n    return this.addWords(parsedWords);\n  };\n\n  addWordsFromFile = async (payload: { blob: Blob, fileType: FileType }) => {\n    const { blob, fileType } = payload;\n    const content = await this.getFileContent(blob);\n    const parsedWords = parser.parse(fileType, content);\n    return this.addWords(parsedWords);\n  };\n\n  getFileContent = (blob: Blob, encoding: \"utf8\" = \"utf8\") => {\n    return new Promise<string>(resolve => {\n      const reader = new FileReader();\n      reader.readAsText(blob, encoding);\n      reader.onload = () => {\n        if (typeof reader.result !== \"string\") return;\n        resolve(reader.result);\n      };\n    });\n  };\n}\n","// @flow\nimport { DATA_TYPE, COL_OPTION, Column } from \"jsstore\";\nimport idbCon from \"./idb\";\n\nexport default class BaseService {\n  dbName = \"\";\n\n  constructor() {\n    this.dbName = \"words_db\";\n    this.initJsStore();\n  }\n\n  get connection() {\n    return idbCon;\n  }\n\n  initJsStore() {\n    this.connection\n      .isDbExist(this.dbName)\n      .then(exist => {\n        if (exist) {\n          this.connection.openDb(this.dbName);\n        } else {\n          this.connection.createDb(this.getDbSchema());\n        }\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  getDbSchema() {\n    const wordsTable = {\n      name: \"words\",\n      columns: [\n        new Column(\"id\").options([\n          COL_OPTION.PrimaryKey,\n          COL_OPTION.AutoIncrement\n        ]),\n        new Column(\"entry\")\n          .options([COL_OPTION.NotNull])\n          .setDataType(DATA_TYPE.String),\n        new Column(\"meaning\")\n          .options([COL_OPTION.NotNull])\n          .setDataType(DATA_TYPE.String)\n      ]\n    };\n\n    return {\n      name: this.dbName,\n      tables: [wordsTable]\n    };\n  }\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport { Input } from \"reactstrap\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport WordGroup from \"./WordGroup\";\nimport WordService, { type Word } from \"../service/word\";\n\ntype Props = {\n  isLoading: boolean\n};\n\ntype State = {\n  words: Word[]\n};\n\nconst wordService = new WordService();\n// Wait 500ms for user input\nconst serch = text => wordService.getWordByEntry(text);\nconst serchDebounce = AwesomeDebouncePromise(serch, 500);\n\nexport default class Search extends Component<Props, State> {\n  state = { words: [] };\n\n  handleChange = async (e: SyntheticInputEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    try {\n      const words = await serchDebounce(value);\n      this.setState({ words });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  render() {\n    const { isLoading } = this.props;\n    const { words } = this.state;\n    return (\n      <div id=\"container\">\n        <Input\n          placeholder=\"Search\"\n          type=\"search\"\n          onChange={this.handleChange}\n          disabled={isLoading}\n        />\n        <WordGroup words={words} limit={100} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function Spinner() {\n  return (\n    <div id=\"circle\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n","// @flow\nimport React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\ntype Menu = { label: string, payload: string };\n\nconst menuItems: Menu[] = [\n  {\n    label: \"TSV\",\n    payload: \"tsv\"\n  },\n  {\n    label: \"CSV\",\n    payload: \"csv\"\n  }\n];\n\ntype Props = {\n  onChange: (payload: string) => void\n};\n\nexport default function FileTypeSelectField({ onChange }: Props) {\n  const handleChange = e => {\n    const { value } = e.target;\n    const menuItem = menuItems.find(o => o.label === value);\n    if (menuItem) {\n      onChange(menuItem.payload);\n    }\n  };\n\n  return (\n    <FormGroup>\n      <Label for=\"fileType\">辞書データの形式</Label>\n      <Input type=\"select\" id=\"fileType\" onChange={handleChange}>\n        {menuItems.map(m => (\n          <option key={m.payload}>{m.label}</option>\n        ))}\n      </Input>\n    </FormGroup>\n  );\n}\n","// @flow\n\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst createConfirm = (\n  Component: React$ComponentType<any>,\n  props: mixed\n): Promise<void> => {\n  const { body } = document;\n  let wrapper;\n  if (body !== null) {\n    wrapper = body.appendChild(document.createElement(\"div\"));\n  }\n  const cleanup = () => {\n    ReactDOM.unmountComponentAtNode(wrapper);\n    return setTimeout(() => wrapper.remove());\n  };\n  const promise: Promise<void> = new Promise((resolve, reject) => {\n    try {\n      ReactDOM.render(\n        <Component cleanup={cleanup} resolve={resolve} {...props} />,\n        wrapper\n      );\n    } catch (e) {\n      reject(e);\n      throw e;\n    }\n  });\n  return promise;\n};\n\nexport default createConfirm;\n","// @flow\n\nimport React, { Component } from \"react\";\n\ntype State = {\n  show: boolean\n};\n\ntype Props = {\n  resolve: boolean => void,\n  cleanup: () => void\n};\n\nfunction setConfirm(WrappedComponent: React$ComponentType<any>) {\n  return class extends Component<Props, State> {\n    constructor() {\n      super();\n      this.state = {\n        show: true\n      };\n    }\n\n    abort = () => {\n      const { resolve, cleanup } = this.props;\n      this.setState(({ show: false }: { show: boolean }), () => {\n        resolve(false);\n        cleanup();\n      });\n    };\n\n    confirm = () => {\n      const { resolve, cleanup } = this.props;\n      this.setState(({ show: false }: { show: boolean }), () => {\n        resolve(true);\n        cleanup();\n      });\n    };\n\n    render(): React$Node {\n      const { show } = this.state;\n      return (\n        <WrappedComponent\n          show={show}\n          abort={this.abort}\n          confirm={this.confirm}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n\nexport default setConfirm;\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\ntype Props = {\n  show: boolean,\n  confirm: () => void,\n  abort: () => void,\n  title: string,\n  content: Element<any>\n};\n\nexport default function Alert({ show, title, content, confirm }: Props) {\n  return (\n    <Modal isOpen={show}>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={confirm}>\n          OK\n        </Button>{\" \"}\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\nimport { type Element } from \"react\";\nimport { createConfirm, setConfirm } from \"./react-confirm-decorator\";\n\nimport AlertDialog from \"../components/ui/AlertDialog\";\n\ntype Props = {\n  title?: string,\n  content?: Element<any> | string,\n  yesLabel?: string\n};\n\nexport default function alert(props: Props) {\n  const dialog = setConfirm(AlertDialog);\n  return createConfirm(dialog, props);\n}\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\ntype Props = {\n  show: boolean,\n  confirm: () => void,\n  abort: () => void,\n  title: string,\n  content: Element<any>\n};\n\nexport default function Alert({ show, title, content, confirm, abort }: Props) {\n  return (\n    <Modal isOpen={show}>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={confirm}>\n          OK\n        </Button>{\" \"}\n        <Button color=\"secondary\" onClick={abort}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\nimport { type Element } from \"react\";\nimport { createConfirm, setConfirm } from \"./react-confirm-decorator\";\n\nimport ConfirmDialog from \"../components/ui/ConfirmDialog\";\n\ntype Props = {\n  title?: string,\n  content?: Element<any> | string,\n  yesLabel?: string,\n  noLabel?: string\n};\n\nexport default function confirm(props: Props) {\n  const dialog = setConfirm(ConfirmDialog);\n  return createConfirm(dialog, props);\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport Spinner from \"./ui/Spinner\";\nimport FileTypeSelect from \"./ui/FileTypeSelect\";\nimport { alert, confirm } from \"../utils\";\nimport WordService from \"../service/word\";\nimport type { FileType } from \"../utils/parser\";\n\nconst wordService = new WordService();\n\ntype Props = {\n  isLoading: boolean,\n  addWords: ({ blob: Blob, fileType: FileType }) => Promise<void>\n};\n\ntype State = {\n  files: Array<Blob>,\n  fileType: FileType\n};\n\nexport default class Options extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { files: [], fileType: \"tsv\" };\n  }\n\n  handleDelete = async () => {\n    const isConfirmed = await confirm({\n      title: \"辞書データの削除\",\n      content: \"登録した辞書データをすべて削除します。よろしいですか？\"\n    });\n\n    if (!isConfirmed) return;\n\n    try {\n      await wordService.clear();\n    } catch (e) {\n      alert({\n        title: \"エラー\",\n        content: e.message\n      });\n    }\n    alert({\n      title: \"辞書データの削除\",\n      content: \"辞書データの削除に成功しました\"\n    });\n  };\n\n  handleLoad = () => {\n    const { addWords } = this.props;\n    const { files, fileType } = this.state;\n    addWords({\n      blob: files[0],\n      fileType\n    });\n  };\n\n  handleChange = (key: $Keys<State>, value: any) => {\n    this.setState({ [key]: value });\n  };\n\n  render() {\n    const { isLoading } = this.props;\n    return (\n      <Form id=\"container\">\n        <FormGroup>\n          <Label for=\"file\">辞書データファイル</Label>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            onChange={e => this.handleChange(\"files\", e.target.files)}\n          />\n        </FormGroup>\n        <FileTypeSelect\n          onChange={value => this.handleChange(\"fileType\", value)}\n        />\n        <Button color=\"info\" disabled={isLoading} onClick={this.handleLoad}>\n          LOAD\n        </Button>{\" \"}\n        <Button color=\"info\" disabled={isLoading} onClick={this.handleDelete}>\n          DELETE\n        </Button>\n        {isLoading && <Spinner />}\n      </Form>\n    );\n  }\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\nimport Search from \"./Search\";\nimport Options from \"./Options\";\nimport { alert, confirm } from \"../utils\";\nimport WordService from \"../service/word\";\nimport type { FileType } from \"../utils/parser\";\n\nconst wordService = new WordService();\n\ntype State = {\n  activeTab: \"Search\" | \"Options\",\n  isLoading: boolean\n};\n\nexport default class App extends Component<{}, State> {\n  state = { activeTab: \"Search\", isLoading: false };\n\n  async componentDidMount() {\n    /**\n     * Get all words\n     */\n    const words = await wordService.getWords();\n    if (words.length > 0) return;\n    const isConfirmed = await confirm({\n      title: \"辞書データの登録\",\n      content: \"辞書データが見つかりません。デフォルトの辞書を登録しますか？\"\n    });\n    if (isConfirmed) {\n      this.addWords();\n    }\n  }\n\n  addWords = async (payload?: { fileType: FileType, blob: Blob }) => {\n    try {\n      /**\n       * Load Starts\n       */\n      let wordCount = 0;\n      this.setState({ isLoading: true, activeTab: \"Options\" });\n\n      if (payload) {\n        // Register from text file\n        const rowsInserted = await wordService.addWordsFromFile(payload);\n        wordCount = rowsInserted.length;\n      } else {\n        // Register from default dictionary\n        const rowsInserted = await wordService.addDefaultWords();\n        wordCount = rowsInserted.length;\n      }\n\n      alert({\n        title: \"登録完了\",\n        content: `${wordCount}語登録しました`\n      });\n      /**\n       * Load Ends\n       */\n      this.setState({ isLoading: false });\n    } catch (e) {\n      alert({\n        title: \"エラー\",\n        content: e.message\n      });\n    }\n  };\n\n  toggle = (tab: \"Search\" | \"Options\") => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab });\n    }\n  };\n\n  render() {\n    const { activeTab, isLoading } = this.state;\n    return (\n      <Container>\n        <h1>Offline Dictionary</h1>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({\n                active: activeTab === \"Search\"\n              })}\n              onClick={() => {\n                this.toggle(\"Search\");\n              }}\n            >\n              Search\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({\n                active: activeTab === \"Options\"\n              })}\n              onClick={() => {\n                this.toggle(\"Options\");\n              }}\n            >\n              Options\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"Search\">\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Search isLoading={isLoading} />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"Options\">\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Options isLoading={isLoading} addWords={this.addWords} />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </Container>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}