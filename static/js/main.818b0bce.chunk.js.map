{"version":3,"sources":["components/WordGroup.js","components/SearchInput.js","service/idb.js","utils/parser.js","service/word.js","service/base.js","components/Search.js","components/ui/FileTypeSelect.js","utils/react-confirm-decorator/createConfirm.js","utils/react-confirm-decorator/setConfirm.js","components/ui/AlertDialog.js","utils/alert.js","components/ui/ConfirmDialog.js","utils/confirm.js","components/Options.js","components/ui/Spinner.js","components/App.js","serviceWorker.js","index.js"],"names":["WordGroup","_ref","words","limit","react_default","a","createElement","reactstrap_es","slice","map","word","key","entry","meaning","SearchInput","onChange","isSearching","id","type","className","placeholder","isOpen","target","placement","Worker","require","idbCon","JsStore","parser","parse","data","result","split","forEach","row","idx","d","push","Error","defaultFilePath","WordService","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tableName","addDefaultWords","asyncToGenerator","regenerator_default","mark","_callee","_ref2","parsedWords","wrap","_context","prev","next","axios","get","sent","abrupt","addWords","stop","addWordsFromFile","_ref3","_callee2","payload","blob","fileType","content","_context2","getFileContent","_x","apply","arguments","encoding","length","undefined","Promise","resolve","reader","FileReader","readAsText","onload","connection","select","from","insert","into","values","return","query","where","like","concat","or","clear","BaseService","dbName","initJsStore","isDbExist","then","exist","openDb","createDb","getDbSchema","catch","err","console","error","wordsTable","name","columns","Column","options","COL_OPTION","PrimaryKey","AutoIncrement","NotNull","setDataType","DATA_TYPE","String","tables","wordService","serchDebounce","AwesomeDebouncePromise","text","getWordByEntry","Search","state","handleChange","e","value","setState","t0","_this$state","Component","menuItems","label","FileTypeSelectField","for","menuItem","find","o","m","createConfirm","props","wrapper","body","document","appendChild","cleanup","ReactDOM","unmountComponentAtNode","setTimeout","remove","reject","render","react","assign","setConfirm","WrappedComponent","_Component","_class2","abort","_this$props","show","confirm","_this$props2","inherits","createClass","Alert","title","color","onClick","alert","dialog","AlertDialog","ConfirmDialog","Options","handleDelete","message","handleLoad","files","defineProperty","_this2","disabled","Spinner","App","activeTab","isLoading","wordCount","rowsInserted","_rowsInserted","toggle","tab","getWords","tabs","classnames","active","tabId","sm","md","size","offset","Search_Search","Options_Options","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","App_App","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.818b0bce.chunk.js","sourcesContent":["// @flow\nimport React from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\nimport { type Word } from \"../service/word\";\n\ntype Props = {|\n  words: Word[],\n  limit: number\n|};\n\nexport default function WordGroup({ words, limit }: Props) {\n  if (!words) return <div />;\n  return (\n    <ListGroup>\n      {words.slice(0, limit).map(word => (\n        <ListGroupItem key={word.entry + word.meaning}>\n          {word.entry}: {word.meaning}\n        </ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n}\n","import React from \"react\";\nimport { Tooltip, Input } from \"reactstrap\";\n\nexport default function SearchInput({ onChange, isSearching }) {\n  return (\n    <div>\n      <Input\n        id=\"input\"\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search\"\n        onChange={onChange}\n      />\n      <Tooltip isOpen={isSearching} target=\"input\" placement=\"bottom\">\n        Searching...\n      </Tooltip>\n    </div>\n  );\n}\n","import * as JsStore from \"jsstore\";\n// eslint-disable-next-line\nconst Worker = require(\"worker-loader?name=scripts/jsstore.worker.js!../../node_modules/jsstore/dist/jsstore.worker\");\n\n// This will ensure that we are using only one instance.\n// Otherwise due to multiple instance multiple worker will be created.\n\nconst idbCon = new JsStore.Instance(new Worker());\nexport default idbCon;\n","// @flow\nexport type FileType = \"tsv\" | \"csv\";\n\nconst parse = (type: FileType, data: string) => {\n  switch (type) {\n    case \"tsv\":\n      const result = [];\n      data.split(\"\\n\").forEach((row, idx) => {\n        const d = row.split(\"\\t\");\n        result.push({ entry: d[0], meaning: d[1] });\n      });\n      return result;\n\n    default:\n      throw new Error(\"Parse Type Invalid\");\n  }\n};\n\nexport default { parse };\n","// @flow\nimport axios from \"axios\";\nimport BaseService from \"./base\";\nimport parser, { type FileType } from \"../utils/parser\";\n\nexport type Word = { entry: string, meaning: string };\n\nconst defaultFilePath =\n  process.env.NODE_ENV === \"production\"\n    ? \"/dictionary-app/ejdic-hand-utf8.txt\"\n    : \"/ejdic-hand-utf8.txt\";\n\nexport default class WordService extends BaseService {\n  tableName = \"\";\n\n  constructor() {\n    super();\n    this.tableName = \"words\";\n  }\n\n  getWords() {\n    return this.connection.select({ from: this.tableName });\n  }\n\n  addWord(word: Word) {\n    return this.connection.insert({\n      into: this.tableName,\n      values: [word],\n      return: true\n    });\n  }\n\n  addWords(words: Word[]) {\n    return this.connection.insert({\n      into: this.tableName,\n      values: words,\n      return: true\n    });\n  }\n\n  getWordByEntry(query: string) {\n    return this.connection.select({\n      from: this.tableName,\n      limit: 100,\n      where: {\n        entry: {\n          like: `%${query}%`\n        },\n        or: {\n          meaning: {\n            like: `%${query}%`\n          }\n        }\n      }\n    });\n  }\n\n  clear() {\n    return this.connection.clear(this.tableName);\n  }\n\n  addDefaultWords = async () => {\n    const { data } = await axios.get(defaultFilePath);\n    const parsedWords = parser.parse(\"tsv\", data);\n    return this.addWords(parsedWords);\n  };\n\n  addWordsFromFile = async (payload: { blob: Blob, fileType: FileType }) => {\n    const { blob, fileType } = payload;\n    const content = await this.getFileContent(blob);\n    const parsedWords = parser.parse(fileType, content);\n    return this.addWords(parsedWords);\n  };\n\n  getFileContent = (blob: Blob, encoding: \"utf8\" = \"utf8\") => {\n    return new Promise<string>(resolve => {\n      const reader = new FileReader();\n      reader.readAsText(blob, encoding);\n      reader.onload = () => {\n        if (typeof reader.result !== \"string\") return;\n        resolve(reader.result);\n      };\n    });\n  };\n}\n","// @flow\nimport { DATA_TYPE, COL_OPTION, Column } from \"jsstore\";\nimport idbCon from \"./idb\";\n\nexport default class BaseService {\n  dbName = \"\";\n\n  constructor() {\n    this.dbName = \"words_db\";\n    this.initJsStore();\n  }\n\n  get connection() {\n    return idbCon;\n  }\n\n  initJsStore() {\n    this.connection\n      .isDbExist(this.dbName)\n      .then(exist => {\n        if (exist) {\n          this.connection.openDb(this.dbName);\n        } else {\n          this.connection.createDb(this.getDbSchema());\n        }\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  getDbSchema() {\n    const wordsTable = {\n      name: \"words\",\n      columns: [\n        new Column(\"id\").options([\n          COL_OPTION.PrimaryKey,\n          COL_OPTION.AutoIncrement\n        ]),\n        new Column(\"entry\")\n          .options([COL_OPTION.NotNull])\n          .setDataType(DATA_TYPE.String),\n        new Column(\"meaning\")\n          .options([COL_OPTION.NotNull])\n          .setDataType(DATA_TYPE.String)\n      ]\n    };\n\n    return {\n      name: this.dbName,\n      tables: [wordsTable]\n    };\n  }\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport AwesomeDebouncePromise from \"awesome-debounce-promise\";\nimport WordGroup from \"./WordGroup\";\nimport SearchInput from \"./SearchInput\";\nimport WordService, { type Word } from \"../service/word\";\n\ntype State = {\n  words: Word[],\n  isSearching: boolean\n};\n\nconst wordService = new WordService();\n// Wait 500ms for user input\nconst serch = text => wordService.getWordByEntry(text);\nconst serchDebounce = AwesomeDebouncePromise(serch, 500);\n\nexport default class Search extends Component<{}, State> {\n  state = { words: [], isSearching: false };\n\n  handleChange = async (e: SyntheticInputEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    if (!value) return;\n    /**\n     * Search Starts\n     */\n    this.setState({\n      isSearching: true\n    });\n    try {\n      const words = await serchDebounce(value);\n      this.setState({\n        words\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    /**\n     * Search Ends\n     */\n    this.setState({\n      isSearching: false\n    });\n  };\n\n  render() {\n    const { words, isSearching } = this.state;\n    return (\n      <div id=\"container\">\n        <SearchInput onChange={this.handleChange} isSearching={isSearching} />\n        <WordGroup words={words} limit={100} />\n      </div>\n    );\n  }\n}\n","// @flow\nimport React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\ntype Menu = { label: string, payload: string };\n\nconst menuItems: Menu[] = [\n  {\n    label: \"TSV\",\n    payload: \"tsv\"\n  },\n  {\n    label: \"CSV\",\n    payload: \"csv\"\n  }\n];\n\ntype Props = {\n  onChange: (payload: string) => void\n};\n\nexport default function FileTypeSelectField({ onChange }: Props) {\n  const handleChange = e => {\n    const { value } = e.target;\n    const menuItem = menuItems.find(o => o.label === value);\n    if (menuItem) {\n      onChange(menuItem.payload);\n    }\n  };\n\n  return (\n    <FormGroup>\n      <Label for=\"fileType\">辞書データの形式</Label>\n      <Input type=\"select\" id=\"fileType\" onChange={handleChange}>\n        {menuItems.map(m => (\n          <option key={m.payload}>{m.label}</option>\n        ))}\n      </Input>\n    </FormGroup>\n  );\n}\n","// @flow\n\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst createConfirm = (\n  Component: React$ComponentType<any>,\n  props: mixed\n): Promise<void> => {\n  const { body } = document;\n  let wrapper;\n  if (body !== null) {\n    wrapper = body.appendChild(document.createElement(\"div\"));\n  }\n  const cleanup = () => {\n    ReactDOM.unmountComponentAtNode(wrapper);\n    return setTimeout(() => wrapper.remove());\n  };\n  const promise: Promise<void> = new Promise((resolve, reject) => {\n    try {\n      ReactDOM.render(\n        <Component cleanup={cleanup} resolve={resolve} {...props} />,\n        wrapper\n      );\n    } catch (e) {\n      reject(e);\n      throw e;\n    }\n  });\n  return promise;\n};\n\nexport default createConfirm;\n","// @flow\n\nimport React, { Component } from \"react\";\n\ntype State = {\n  show: boolean\n};\n\ntype Props = {\n  resolve: boolean => void,\n  cleanup: () => void\n};\n\nfunction setConfirm(WrappedComponent: React$ComponentType<any>) {\n  return class extends Component<Props, State> {\n    constructor() {\n      super();\n      this.state = {\n        show: true\n      };\n    }\n\n    abort = () => {\n      const { resolve, cleanup } = this.props;\n      this.setState(({ show: false }: { show: boolean }), () => {\n        resolve(false);\n        cleanup();\n      });\n    };\n\n    confirm = () => {\n      const { resolve, cleanup } = this.props;\n      this.setState(({ show: false }: { show: boolean }), () => {\n        resolve(true);\n        cleanup();\n      });\n    };\n\n    render(): React$Node {\n      const { show } = this.state;\n      return (\n        <WrappedComponent\n          show={show}\n          abort={this.abort}\n          confirm={this.confirm}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n\nexport default setConfirm;\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\ntype Props = {\n  show: boolean,\n  confirm: () => void,\n  abort: () => void,\n  title: string,\n  content: Element<any>\n};\n\nexport default function Alert({ show, title, content, confirm }: Props) {\n  return (\n    <Modal isOpen={show}>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={confirm}>\n          OK\n        </Button>{\" \"}\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\nimport { type Element } from \"react\";\nimport { createConfirm, setConfirm } from \"./react-confirm-decorator\";\n\nimport AlertDialog from \"../components/ui/AlertDialog\";\n\ntype Props = {\n  title?: string,\n  content?: Element<any> | string,\n  yesLabel?: string\n};\n\nexport default function alert(props: Props) {\n  const dialog = setConfirm(AlertDialog);\n  return createConfirm(dialog, props);\n}\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\ntype Props = {\n  show: boolean,\n  confirm: () => void,\n  abort: () => void,\n  title: string,\n  content: Element<any>\n};\n\nexport default function Alert({ show, title, content, confirm, abort }: Props) {\n  return (\n    <Modal isOpen={show}>\n      <ModalHeader>{title}</ModalHeader>\n      <ModalBody>{content}</ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={confirm}>\n          OK\n        </Button>{\" \"}\n        <Button color=\"secondary\" onClick={abort}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\nimport { type Element } from \"react\";\nimport { createConfirm, setConfirm } from \"./react-confirm-decorator\";\n\nimport ConfirmDialog from \"../components/ui/ConfirmDialog\";\n\ntype Props = {\n  title?: string,\n  content?: Element<any> | string,\n  yesLabel?: string,\n  noLabel?: string\n};\n\nexport default function confirm(props: Props) {\n  const dialog = setConfirm(ConfirmDialog);\n  return createConfirm(dialog, props);\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport FileTypeSelect from \"./ui/FileTypeSelect\";\nimport { alert, confirm } from \"../utils\";\nimport WordService from \"../service/word\";\nimport type { FileType } from \"../utils/parser\";\n\nconst wordService = new WordService();\n\ntype Props = {\n  addWords: ({ blob: Blob, fileType: FileType }) => Promise<void>\n};\n\ntype State = {\n  files: Array<Blob>,\n  fileType: FileType\n};\n\nexport default class Options extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { files: [], fileType: \"tsv\" };\n  }\n\n  handleDelete = async () => {\n    const isConfirmed = await confirm({\n      title: \"辞書データの削除\",\n      content: \"登録した辞書データをすべて削除します。よろしいですか？\"\n    });\n\n    if (!isConfirmed) return;\n\n    try {\n      await wordService.clear();\n    } catch (e) {\n      alert({\n        title: \"エラー\",\n        content: e.message\n      });\n    }\n    alert({\n      title: \"辞書データの削除\",\n      content: \"辞書データの削除に成功しました\"\n    });\n  };\n\n  handleLoad = () => {\n    const { addWords } = this.props;\n    const { files, fileType } = this.state;\n    addWords({\n      blob: files[0],\n      fileType\n    });\n  };\n\n  handleChange = (key: $Keys<State>, value: any) => {\n    this.setState({ [key]: value });\n  };\n\n  render() {\n    const { files } = this.state;\n    return (\n      <Form id=\"container\">\n        <FormGroup>\n          <Label for=\"file\">辞書データファイル</Label>\n          <Input\n            type=\"file\"\n            id=\"file\"\n            onChange={e => this.handleChange(\"files\", e.target.files)}\n          />\n        </FormGroup>\n        <FileTypeSelect\n          onChange={value => this.handleChange(\"fileType\", value)}\n        />\n        <Button\n          color=\"info\"\n          disabled={files.length === 0}\n          onClick={this.handleLoad}\n        >\n          LOAD\n        </Button>{\" \"}\n        <Button color=\"info\" onClick={this.handleDelete}>\n          DELETE\n        </Button>\n      </Form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function Spinner() {\n  return (\n    <div>\n      <div id=\"circle\">\n        <div className=\"loader\" />\n      </div>\n      <div id=\"loader-bg\" />\n    </div>\n  );\n}\n","// @flow\nimport React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport {\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\nimport Search from \"./Search\";\nimport Options from \"./Options\";\nimport Spinner from \"./ui/Spinner\";\nimport { alert, confirm } from \"../utils\";\nimport WordService from \"../service/word\";\nimport type { FileType } from \"../utils/parser\";\n\nconst wordService = new WordService();\n\ntype State = {\n  activeTab: \"Search\" | \"Options\",\n  isLoading: boolean\n};\n\nexport default class App extends Component<{}, State> {\n  state = { activeTab: \"Search\", isLoading: false };\n\n  async componentDidMount() {\n    /**\n     * Get all words\n     */\n    const words = await wordService.getWords();\n    if (words.length > 0) return;\n    const isConfirmed = await confirm({\n      title: \"辞書データの登録\",\n      content: \"辞書データが見つかりません。デフォルトの辞書を登録しますか？\"\n    });\n    if (isConfirmed) {\n      this.addWords();\n    }\n  }\n\n  addWords = async (payload?: { fileType: FileType, blob: Blob }) => {\n    try {\n      /**\n       * Load Starts\n       */\n      let wordCount = 0;\n      this.setState({ isLoading: true });\n\n      if (payload) {\n        // Register from text file\n        const rowsInserted = await wordService.addWordsFromFile(payload);\n        wordCount = rowsInserted.length;\n      } else {\n        // Register from default dictionary\n        const rowsInserted = await wordService.addDefaultWords();\n        wordCount = rowsInserted.length;\n      }\n\n      alert({\n        title: \"登録完了\",\n        content: `${wordCount}語登録しました`\n      });\n      /**\n       * Load Ends\n       */\n      this.setState({ isLoading: false });\n    } catch (e) {\n      this.setState({\n        isLoading: false\n      });\n      alert({\n        title: \"エラー\",\n        content: e.message\n      });\n    }\n  };\n\n  toggle = (tab: \"Search\" | \"Options\") => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab });\n    }\n  };\n\n  render() {\n    const { activeTab, isLoading } = this.state;\n    return (\n      <Container>\n        {isLoading && <Spinner />}\n        <h1>Offline Dictionary</h1>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              className={classnames({\n                active: activeTab === \"Search\"\n              })}\n              onClick={() => {\n                this.toggle(\"Search\");\n              }}\n            >\n              Search\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({\n                active: activeTab === \"Options\"\n              })}\n              onClick={() => {\n                this.toggle(\"Options\");\n              }}\n            >\n              Options\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"Search\">\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Search />\n              </Col>\n            </Row>\n          </TabPane>\n          <TabPane tabId=\"Options\">\n            <Row>\n              <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                <Options addWords={this.addWords} />\n              </Col>\n            </Row>\n          </TabPane>\n        </TabContent>\n      </Container>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}